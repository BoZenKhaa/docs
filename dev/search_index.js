var documenterSearchIndex = {"docs":
[{"location":"userguide/editingcode/#Editing-Code-1","page":"Editing Code","title":"Editing Code","text":"","category":"section"},{"location":"devdocs/devdocs/#Developer-Documentation-1","page":"Overview","title":"Developer Documentation","text":"","category":"section"},{"location":"userguide/compilesysimage/#Compiling-Sysimages-1","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"","category":"section"},{"location":"userguide/compilesysimage/#","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"The Julia VS Code extension enables you to compile a custom sysimage for your Julia environments. The extension automatically uses sysimages for the current environment when it starts a new Julia REPL in VS Code. ","category":"page"},{"location":"userguide/compilesysimage/#","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"Custom sysimages can significantly reduce load times for packages. ","category":"page"},{"location":"userguide/compilesysimage/#Creating-a-sysimage-for-the-active-environment-1","page":"Compiling Sysimages","title":"Creating a sysimage for the active environment","text":"","category":"section"},{"location":"userguide/compilesysimage/#","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"The Julia extension adds a build task for custom sysimages to the Visual Studio Code task system. To run the build task, select the command Tasks: Run Build Task and then select Julia: Build custom sysimage for current environment. ","category":"page"},{"location":"userguide/compilesysimage/#","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"The build task creates a sysimage that includes all packages in the current Julia environment. This sysimage is saved in the same folder where the Project.toml and Manifest.toml of the current Julia environment are stored. The name of the sysimage file will be JuliaSysimage.dll (Windows) or JuliaSysimage.so. ","category":"page"},{"location":"userguide/compilesysimage/#Using-custom-sysimages-1","page":"Compiling Sysimages","title":"Using custom sysimages","text":"","category":"section"},{"location":"userguide/compilesysimage/#","page":"Compiling Sysimages","title":"Compiling Sysimages","text":"When the Julia extension starts a new Julia REPL process, the extension first looks for a custom sysimage file for the current Julia environment. The extension then verifies whether the custom sysimage file is up to date by comparing the last modified date of the sysimage file to the last modified date of the Manifest.toml file. If an up to date sysimage file exists, the Julia extension automatically starts the Julia REPL process with the custom sysimage loaded. ","category":"page"},{"location":"userguide/understandingcode/#Understanding-Code-1","page":"Understanding Code","title":"Understanding Code","text":"","category":"section"},{"location":"userguide/keyboard/#Keyboard-Shortcuts-1","page":"Keyboard Shortcuts","title":"Keyboard Shortcuts","text":"","category":"section"},{"location":"userguide/keyboard/#","page":"Keyboard Shortcuts","title":"Keyboard Shortcuts","text":"Below are keyboard shortcut reference for three different platforms.","category":"page"},{"location":"userguide/keyboard/#Windows-1","page":"Keyboard Shortcuts","title":"Windows","text":"","category":"section"},{"location":"userguide/keyboard/#","page":"Keyboard Shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Description\nAlt + E Julia: Change Current Environment\nAlt + O Julia: Start REPL\nAlt + K Julia: Stop REPL\nCtrl + Enter Julia: Send Current Line or Selection to REPL\nAlt + Enter Julia: Execute Code And Move\nRightArrow, DownArrow, PageDown Julia: Show Next Plot\nLeftArrow, UpArrow, PageUp Julia: Show Previous Plot\nHome Julia: Show First Plot\nEnd Julia: Show Last Plot\nShift + Delete Julia: Delete All Plots\nShift + Enter Julia: Execute Code Cell And Move\nCtrl + C Julia: Clear Inline Results in Editor\nCtrl + D Julia: Clear Current Inline Result\nAlt + M Julia: Select Current Module","category":"page"},{"location":"userguide/keyboard/#Mac-1","page":"Keyboard Shortcuts","title":"Mac","text":"","category":"section"},{"location":"userguide/keyboard/#","page":"Keyboard Shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Description\nOption + E Julia: Change Current Environment\nOption + O Julia: Start REPL\nOption + K Julia: Stop REPL\nControl + Enter Julia: Send Current Line or Selection to REPL\nOption + Enter Julia: Execute Code And Move\nRightArrow, DownArrow, PageDown Julia: Show Next Plot\nLeftArrow, UpArrow, PageUp Julia: Show Previous Plot\nHome Julia: Show First Plot\nEnd Julia: Show Last Plot\nShift + Delete Julia: Delete All Plots\nShift + Enter Julia: Execute Code Cell And Move\nControl + C Julia: Clear Inline Results in Editor\nControl + D Julia: Clear Current Inline Result\nOption + M Julia: Select Current Module","category":"page"},{"location":"userguide/keyboard/#Linux-1","page":"Keyboard Shortcuts","title":"Linux","text":"","category":"section"},{"location":"userguide/keyboard/#","page":"Keyboard Shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Description\nAlt + E Julia: Change Current Environment\nAlt + O Julia: Start REPL\nAlt + K Julia: Stop REPL\nCtrl + Enter Julia: Send Current Line or Selection to REPL\nAlt + Enter Julia: Execute Code And Move\nRightArrow, DownArrow, PageDown Julia: Show Next Plot\nLeftArrow, UpArrow, PageUp Julia: Show Previous Plot\nHome Julia: Show First Plot\nEnd Julia: Show Last Plot\nShift + Delete Julia: Delete All Plots\nShift + Enter Julia: Execute Code Cell And Move\nCtrl + C Julia: Clear Inline Results in Editor\nCtrl + D Julia: Clear Current Inline Result\nAlt + M Julia: Select Current Module","category":"page"},{"location":"setup/#Setup-1","page":"Setup","title":"Setup","text":"","category":"section"},{"location":"setup/#","page":"Setup","title":"Setup","text":"Getting the Julia extension for VS Code to work involves two steps:","category":"page"},{"location":"setup/#","page":"Setup","title":"Setup","text":"Install VS Code and then,\nInstall the Julia extension. ","category":"page"},{"location":"setup/#","page":"Setup","title":"Setup","text":"In rare situations you also need to configure the extension to find your Julia installation.","category":"page"},{"location":"setup/#Installing-VS-Code-1","page":"Setup","title":"Installing VS Code","text":"","category":"section"},{"location":"setup/#","page":"Setup","title":"Setup","text":"Just head over to the VS Code homepage. \nFollow the installation instructions for your platform. ","category":"page"},{"location":"setup/#","page":"Setup","title":"Setup","text":"At the end of this step you should be able to start VS Code.","category":"page"},{"location":"setup/#Install-the-Julia-extension-1","page":"Setup","title":"Install the Julia extension","text":"","category":"section"},{"location":"setup/#","page":"Setup","title":"Setup","text":"First, start VS Code.\nInside VS Code, go to the extensions view either by executing the View: Show Extensions command (click View->Command Palette...) or by clicking on the extension icon on the left side of the VS Code window.\nIn the extensions view, simply search for the term julia in the marketplace search box, then select the Julia extension and click the install button. \nYou might have to restart VS Code after this step.","category":"page"},{"location":"setup/#Configure-the-Julia-extension-1","page":"Setup","title":"Configure the Julia extension","text":"","category":"section"},{"location":"setup/#","page":"Setup","title":"Setup","text":"If you have installed Julia into a standard location on Mac or Windows, or if the Julia binary is on your PATH, the Julia VS Code extension should automatically find your Julia installation and you should not need to configure anything.\nIf the extension does not find your Julia installation automatically, or if you want to use a different Julia installation than the default one,\nYou can set the julia.executablePath to the full path of Julia executable that the extension should use. In that case the extension will always use that version of Julia.\nTo edit your configuration settings, \nexecute the Preferences: Open User Settings command (you can also access it via the menu File->Preferences->Settings),\nAnd then make sure your user settings include the julia.executablePath setting.\nThe format of the string should follow your platform specific conventions, and be aware that the backlash \\ is the escape character in JSON, so you need to use \\\\ as the path separator character on Windows.","category":"page"},{"location":"userguide/remote/#Remote-Development-1","page":"Remote Development","title":"Remote Development","text":"","category":"section"},{"location":"release-notes/v0_17/#Julia-VS-Code-extension-v0.17-release-1","page":"Version v0.17","title":"Julia VS Code extension v0.17 release","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Welcome to the v0.17 release of the Julia VS Code extension.","category":"page"},{"location":"release-notes/v0_17/#Global-variable-support-in-the-debugger-variable-explorer-1","page":"Version v0.17","title":"Global variable support in the debugger variable explorer","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"The Variables pane in the integrated debugger now supports global variables:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"(Image: globals in debugger)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Globals shows global variables used in the current function's scope, whereas Global (...) shows all global variables defined in the current scope's enclosing module. All of these can be edited, but be vary of unexpected behaviour.","category":"page"},{"location":"release-notes/v0_17/#Debug-and-run-buttons-above-Julia-files-1","page":"Version v0.17","title":"Debug and run buttons above Julia files","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"We added a run and debug button above the file editor area when you open a Julia file that makes it easier to run the currently active file:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"(Image: run-debugger buttons)","category":"page"},{"location":"release-notes/v0_17/#Support-for-step-in-targets-in-the-debugger-1","page":"Version v0.17","title":"Support for step in targets in the debugger","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"VSCode now supports a new \"Step into Targets\" debugger UI, which you can access by opening the context menu in an editor while debugging. It will allow you to step into a function call on the current line:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"(Image: debugger: step into targets)","category":"page"},{"location":"release-notes/v0_17/#Profile-viewing-support-1","page":"Version v0.17","title":"Profile viewing support","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"We added new functionality that allows you to save profiling results in a *.cpuprofile file. Recent versions of VS Code have built-in support to analyze and visualize these profiling result files.","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"The easiest way to use this functionality is the @profview macro, which executes your code under the Julia profiler and then saves the results as a *.cpuprofile file. To use it, start a Julia REPL, and then call @profview like this:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"julia> @profview my_function_that_should_be_profiled()","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Alternatively you can call the function view_profile in the REPL which will save the profiling results from the previous profiling session.","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Once you have created a *.cpuprofile file with one of these methods, you can open it in VS Code. The initial view shown is a tabular display of the profiling results. The search bar at the top allows you to filter the profiling results and provides a rich query language for more advanced queries:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"(Image: profiler table view)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"You can also look at the same information in a flamegraph by clicking the little fire button next to the search area. The first time you do so, you will be asked to install another extension, go ahead and do that. The flamegraph visualization then looks like this:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"(Image: profiler flame view)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Special thanks to Valentin and Connor for their help with this feature!","category":"page"},{"location":"release-notes/v0_17/#Inline-result-styling-improvements-1","page":"Version v0.17","title":"Inline result styling improvements","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"The stylings of inline result bubbles are greatly improved; the left-border color will make it easier to distinguish them from the actual code:","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"in dark theme (Iceberg): (Image: inline bubbles dark)\nin light theme (Night Owl Light): (Image: inline bubbles light)","category":"page"},{"location":"release-notes/v0_17/#Stackframe-highlighting-for-inline-evaluations-1","page":"Version v0.17","title":"Stackframe highlighting for inline evaluations","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Now our inline execution will highlight all lines in backtrace when you hit an error: (Image: stackframe highlight)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"If you hover your mouse over any of the lines, the detail of the error will show up and you can goto whichever frame in a backtrace by clicking the links: (Image: stackframe hover)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Additionally, the topmost buttons allow you to go to first/previous/next/last frames, and clear all the traces: (Image: stackframe buttons)","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"We also added the improvement to cut off the julia-vscode extension's internal lines from backtrace so that they won't appear in users' stackframe.","category":"page"},{"location":"release-notes/v0_17/#Configuration-option-to-exclude-folders-from-linting-1","page":"Version v0.17","title":"Configuration option to exclude folders from linting","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"We've added an new configuration option julia.lint.disabledDirs. It specifies sub-directories in a package directory where only basic linting is enabled, and this will drastically lowers the chance for false positives. By default, test and docs are set, so most problematic errors (e.g. \"Missing reference ...\") will be suppressed there.","category":"page"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"Note this config is only a temporary fix for our environment handling – we will work on redesigning the whole environment handling, which will hopefully get rid of most of those false positives, and then we may probably remove this configuration in the future.","category":"page"},{"location":"release-notes/v0_17/#Extension-API-1","page":"Version v0.17","title":"Extension API","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"This extension now exports an API, which can be consumed by other VSCode extensions (see the VSCode docs for more info). Version 1 of the API exports the async getJuliaPath() and async getEnvironment() functions.","category":"page"},{"location":"release-notes/v0_17/#Bugfixes-1","page":"Version v0.17","title":"Bugfixes","text":"","category":"section"},{"location":"release-notes/v0_17/#","page":"Version v0.17","title":"Version v0.17","text":"We've also fixed a plethora of issues across the entire extension.","category":"page"},{"location":"userguide/tasks/#Tasks-1","page":"Tasks","title":"Tasks","text":"","category":"section"},{"location":"userguide/grid/#Data-Grid-1","page":"Data Grid","title":"Data Grid","text":"","category":"section"},{"location":"userguide/formatter/#Formatting-Code-1","page":"Formatting Code","title":"Formatting Code","text":"","category":"section"},{"location":"userguide/linter/#Linter-1","page":"Linter","title":"Linter","text":"","category":"section"},{"location":"gettingstarted/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"This guide is intended for new or beginner-level users who are new to the Visual Studio (VS) Code extension. The getting started tasks use the Julia programming language to create a “Hello World” program in VS Code. ","category":"page"},{"location":"gettingstarted/#Prerequisites-1","page":"Getting Started","title":"Prerequisites","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Julia\nVS Code\nVS Code Julia extension","category":"page"},{"location":"gettingstarted/#Installation-and-Configuration-1","page":"Getting Started","title":"Installation and Configuration","text":"","category":"section"},{"location":"gettingstarted/#Installing-Julia-1","page":"Getting Started","title":"Installing Julia","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Download the latest stable version of Julia, based on the platform you are using, from the Julia homepage.","category":"page"},{"location":"gettingstarted/#Installing-VS-Code-1","page":"Getting Started","title":"Installing VS Code","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Download and install VS Code, based on the platform you are using, from the VS Code homepage.","category":"page"},{"location":"gettingstarted/#Installing-the-Julia-extension-1","page":"Getting Started","title":"Installing the Julia extension","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Start or open Visual Studio Code. \nSelect View and then click Extensions to open Extension View. \nEnter the term julia in the marketplace search box. Click the green Install button to download the extension. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"You successfully downloaded the Julia extension for VS Code. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"NOTE: It is recommended that you restart VS Code after installation. ","category":"page"},{"location":"gettingstarted/#Configuring-the-Julia-extension-1","page":"Getting Started","title":"Configuring the Julia extension","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"If you installed Julia into a standard location on Mac or Windows, or if the Julia binary is on your PATH, the Julia VS Code extension automatically finds your Julia installation. You do not need to configure the extension. Continue onto the next section. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"If the VS Code extension does not find your Julia installation automatically, or you want to use a different Julia installation than the default one, use the following steps to configure the extension.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Set the julia.executablePath to the full path of Julia executable that the extension should use. \nTo edit your configuration settings, select File, then select Preferences, and then click Settings. Ensure that your user settings include the julia.executablePath setting. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"NOTE: The format of the string should follow your platform specific conventions.  Note that the backslash \\ is the escape character in JSON, therefore use \\\\ as the path separator character on Windows.","category":"page"},{"location":"gettingstarted/#Creating-Your-First-Julia-Hello-World-program-1","page":"Getting Started","title":"Creating Your First Julia Hello World program","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"From the File Explorer toolbar, click the New File button on the Hello folder:","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Name the file hello.jl, and it automatically opens in the editor. ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The .jl file extension indicates to VS Code that you interpret this file as a Julia program, therefore it evaluates the contents with the Julia extension and the selected interpreter.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Enter the following source code in hello.jl:","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"msg = \"Hello World\"\nprintln(msg)","category":"page"},{"location":"gettingstarted/#Running-Hello-World-program-1","page":"Getting Started","title":"Running Hello World program","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"To run the Hello World program, click Run: Julia File in Terminal play button in the top-right side of the editor.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"You can see the corresponding output in the terminal.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(Image: Julia VS Code Extension)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Congratulations! You have just completed your first Julia program.","category":"page"},{"location":"gettingstarted/#Learn-More-1","page":"Getting Started","title":"Learn More","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"To learn more about the Julia language, see Juilalang.org. To learn more about Julia in Visual Code Studio see VS Code","category":"page"},{"location":"release-notes/v0_16/#Julia-VS-Code-extension-v0.16-release-1","page":"Version v0.16","title":"Julia VS Code extension v0.16 release","text":"","category":"section"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Welcome to the v0.16 release of the Julia VS Code extension.","category":"page"},{"location":"release-notes/v0_16/#Inline-evaluation-1","page":"Version v0.16","title":"Inline evaluation","text":"","category":"section"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Code evaluation has been overhauled for this release.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"The Julia: Execute * (e.g. Julia: Execute Code And Move, by default accessible with Alt-Enter) commands now asynchronously evaluate the selection, current code block, or file. These commands also evaluate the code in the context of their containing module, which is indicated in the status bar:","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"(Image: )","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"You can change the module for a file by clicking on the module indicator or by calling the Julia: Select Current Module command (e.g. with the Ctrl-J Ctrl-M keybinding).","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Evaluating code directly into a module is especially helpful for a Revise-less workflow – it allows you to easily update methods or globals.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Another new feature in this release are inline results for code evaluated from the editor. To enable them, select the inline result type in the extension's Julia > Execution: Result Type setting.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Inline results display the first line of the result's plain-text representation (via Base.show). Details are available by hovering over the result, like in the screenshot below (make sure you have the Editor > Hover: Enabled setting ticked):","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"(Image: )","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"The inline result on the current line can be cleared with Julia: Clear Current Inline Result (Ctrl-I Ctrl-D); all inline results in the active text editor are cleared with Julia: Clear All Inline Results (Ctrl-I Ctrl-C).","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"We're still working on inline evaluation, inline results, and related features, so expect more changes in the following releases.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"note: Note\nThe Julia: Send Current Line or Selection to REPL command simply copies the current line or selection and pastes it into the REPL, so it does not take the code's module into account.","category":"page"},{"location":"release-notes/v0_16/#Workspace-view-1","page":"Version v0.16","title":"Workspace view","text":"","category":"section"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"It's now possible to inspect the current REPL's runtime state in the Workspace pane, which you can open with the View: Show Julia Explorer command or by clicking on the Julia symbol in the activity bar.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"You can drill down into modules and find out what they define, inspect complex structs or dictionaries, and even inspect arbitrarily large arrays:","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"(Image: )","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"All of this lazy-loaded, so don't worry about recursive types or big arrays – we're taking great care not to influence the editor's performance or mess with Julia's GC.","category":"page"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"Supported types like arrays (or other table-like objects) and plots can be shown in the integrated table viewer or plot pane with the click of a button.","category":"page"},{"location":"release-notes/v0_16/#Faster-REPL-startup-1","page":"Version v0.16","title":"Faster REPL startup","text":"","category":"section"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"All code the extension loads into the REPL process is now in a (precompiled) module, which should speed up startup.","category":"page"},{"location":"release-notes/v0_16/#Bugfixes-1","page":"Version v0.16","title":"Bugfixes","text":"","category":"section"},{"location":"release-notes/v0_16/#","page":"Version v0.16","title":"Version v0.16","text":"We've also fixed a plethora of issues in the Language Server and the interactive code.","category":"page"},{"location":"userguide/plotgallery/#Plot-Gallery-1","page":"Plot Gallery","title":"Plot Gallery","text":"","category":"section"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Julia Plots provides us with the capability to create visualizations of data.","category":"page"},{"location":"userguide/plotgallery/#Install-Plots-Package-1","page":"Plot Gallery","title":"Install Plots Package","text":"","category":"section"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"First, Open the Julia Terminal (also known as REPL), you can follow the steps here.","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"At the Julia prompt in the REPL window, type the following:","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"julia> using Pkg","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"This will tell Julia that you are going to use the package manager.","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Then type the following to add Plots package:","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"julia> Pkg.add(\"Plots\")","category":"page"},{"location":"userguide/plotgallery/#Create-Visualization-1","page":"Plot Gallery","title":"Create Visualization","text":"","category":"section"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Remember to keep the REPL open as this is where any output from your program will be printed.","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"The first piece of code that you need to execute is this:","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"using Plots","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"This tells Julia to load the library that we will use to create our visualizations.","category":"page"},{"location":"userguide/plotgallery/#Example-1","page":"Plot Gallery","title":"Example","text":"","category":"section"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Let's walkthrough a simple program to understand this:","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Write the following code.","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"using Plots\nx = 1:10; y = rand(10); # These are the plotting data \nplot(x,y, label=\"my label\")","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"Now Run this, you can follow the steps here.","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"You will get something like the following graph as a output in a new tab in VSCode:","category":"page"},{"location":"userguide/plotgallery/#","page":"Plot Gallery","title":"Plot Gallery","text":"(Image: Plot Graph)","category":"page"},{"location":"userguide/debugging/#Debugging-1","page":"Debugging","title":"Debugging","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The Julia extension supports debugging of all types of Julia programs and applications.  ","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"For general debugging features such as inspecting variables, setting breakpoints, and other activities that aren't language-dependent, review VS Code debugging.  ","category":"page"},{"location":"userguide/debugging/#Example-1","page":"Debugging","title":"Example","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Open a Julia file in VS Code. \nClick the Run button. You will now see the default debugger start panel:\nClick Run and Debug (or select F5) to run the active Julia file in the debugger. Output is displayed in the Julia Debug terminal. ","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"In this example the whole program ran through in one go and finished without any problem. Lets make this example a bit more useful by setting a breakpoint on line 11. We do this by simple clicking with the mouse in the left most column of the code editor:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The red dot shows us that we have now set a breakpoint. Next we start the program again (either by clicking on Run and Debug or pressing F5). When the program reaches line 11, it will pause:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The yellow line shows us the location that we will execute next if we continue to run the program. We can also see where we are in the call stack and a list of all breakpoints. At the top of the text editor we now see a toolbar with commands for common debug actions: Continue, Step over, Step Into, Step Out etc. Lets click once on Step Over and then Step Into. We are now paused on the first line of the bar function:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The Variables view now shows us what local variables we have in this function and what their current values are. As we step through the program, and eventually reach the end of the bar function, the list of local variables gets longer, i.e. we now also see the values for c and d:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Let us set another breakpoint on line 15 and then continue the program until it hits that breakpoint. Then we click on Debug Console and see a view like this:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"In this view we can evaluate arbitrary Julia code in the context of the current function. For example, we can compute the log of x by running log(x) here:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"We can also change the value of any local variable while the program is paused. For example, to change the value of x, we can double click in the Variables section on the value 27 next to x and then enter any arbitrary Julia expression. The value this expression returns will become the new value for the variable x. In the following example We changed the value of x to a string:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"This concludes the very basic walk through. I’ll now want to highlight some other features.","category":"page"},{"location":"userguide/debugging/#Ways-to-start-the-debugger-1","page":"Debugging","title":"Ways to start the debugger","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"There are two different ways to start the debugger.","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The first you already learned in the walk through: you run a Julia file in the debugger.\nThe second allows you to debug code in the interactive REPL.","category":"page"},{"location":"userguide/debugging/#Running-Julia-files-1","page":"Debugging","title":"Running Julia files","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"In our example we started the currently active Julia file in the debugger. This is the most basic way to start debugging, but there are many more options that you can configure in a VS Code launch.json file. Examples include setting a fixed Julia file as the startup file, configuring command line arguments etc. The launch.json functionality is described in more detail in the VS Code debugger documentation.","category":"page"},{"location":"userguide/debugging/#Debugging-code-from-the-REPL-1","page":"Debugging","title":"Debugging code from the REPL","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"You can also start the debugger from the REPL. In that situation the debugger will attach to the already running REPL. To start such a debug session you use two macros in the REPL: the @enter and @run macro. Both are very simple: they will start the debugger on the code that was passed to the macro. The @run macro will run the code until a breakpoint is hit, while the @enter macro will pause the debugger on the first line of the code. For example, you can start debugging the println function from the REPL by entering @enter println(\"Test\")","category":"page"},{"location":"userguide/debugging/#Breakpoints-1","page":"Debugging","title":"Breakpoints","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"You already learned how you can easily set breakpoints in the source code itself. There are two more options for breakpoints: function breakpoints and condition on breakpoints.","category":"page"},{"location":"userguide/debugging/#Function-breakpoints-1","page":"Debugging","title":"Function breakpoints","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"If you click on the little + sign in the BREAKPOINTS view, you can add a function breakpoint. Simply enter the name of the function you want to break on. You can also configure it to only break on specific methods by specifying a signature like foo(::String, ::Number).","category":"page"},{"location":"userguide/debugging/#Breakpoint-conditions-1","page":"Debugging","title":"Breakpoint conditions","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"If you click with the right mouse onto a breakpoint in the editor, you can select an option Edit breakpoint..., and then you can add a condition on the breakpoint. You can enter any valid Julia expression that returns a Bool value here. You have of course full access to all local variables in this expression.","category":"page"},{"location":"userguide/debugging/#Variables-viewer-1","page":"Debugging","title":"Variables viewer","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Composite variables, arrays and dictionaries have full tree drill down support in the variables viewer:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#Watch-section-1","page":"Debugging","title":"Watch section","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The watch section allows you to enter arbitrary Julia expressions that are evaluated whenever the program pauses and the result is shown:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#Call-stack-1","page":"Debugging","title":"Call stack","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The call stack section allows you to look at the content of any stack frame, i.e. when you click on a different function there it will show the local variables for the selected stack frame. You can also restart code execution at any stack frame by clicking the small restart icon next to a given entry here:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Note that this last feature can be quite brittle, in particular if your functions modify any global state.","category":"page"},{"location":"userguide/debugging/#Exceptions-1","page":"Debugging","title":"Exceptions","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"If your code throws an exception, you get a nice exception view:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"You can also configure the behavior of the debugger in the face of exceptions in the BREAKPOINTS part of the UI.","category":"page"},{"location":"userguide/debugging/#Compile-mode-1","page":"Debugging","title":"Compile mode","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The breakpoints view has another option called Enable compile mode:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"(Image: Debugger)","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"The functionality of this option is the following:","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"If you select this option, breakpoints that are set in any function that is called from the current stack frame will no longer pause code execution. In our example, if you have paused in function foo and then select this option, a breakpoint in bar would no longer pause execution. Breakpoints in foo would still pause the debugger.","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Why would you ever want to use this feature?","category":"page"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"Your code will run a lot faster with this option enabled.","category":"page"},{"location":"userguide/debugging/#Troubleshooting-1","page":"Debugging","title":"Troubleshooting","text":"","category":"section"},{"location":"userguide/debugging/#","page":"Debugging","title":"Debugging","text":"If you encounter any issue when using the debugger, Please do let us know about it over at the Julia VS Code repository.","category":"page"},{"location":"userguide/codenavigation/#Code-Navigation-1","page":"Code Navigation","title":"Code Navigation","text":"","category":"section"},{"location":"userguide/codenavigation/#Quick-File-Navigation-1","page":"Code Navigation","title":"Quick File Navigation","text":"","category":"section"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"Tip: Hold Ctrl+P (Quick Open) to open any file by its name.","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"There are two commands which enable you to navigate in and across files with easy-to-use key bindings. ","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"Hold Ctrl and press Tab to view a list of all files open in an editor group. \nTo open one of these files, press Tab again to pick the file you want to navigate to, then release Ctrl to open it.","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"(Image: Code Navigation)","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"Alternatively, you can use Alt+Left and Alt+Right to navigate between files and edit locations.  If you are jumping around between different lines of the same file, these shortcuts allow you to navigate between those locations easily.","category":"page"},{"location":"userguide/codenavigation/#Open-Package-Directory-1","page":"Code Navigation","title":"Open Package Directory","text":"","category":"section"},{"location":"userguide/codenavigation/#Go-to-Definition-1","page":"Code Navigation","title":"Go to Definition","text":"","category":"section"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"You can go to the definition of a symbol by pressing F12.","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"If you press Ctrl and hover over a symbol, a preview of the declaration will appear:","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"(Image: )","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"Tip: You can jump to the definition with Ctrl+Click or open the definition to the side with Ctrl+Alt+Click.","category":"page"},{"location":"userguide/codenavigation/#Go-to-Symbols-1","page":"Code Navigation","title":"Go to Symbols","text":"","category":"section"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"You can navigate symbols inside a file with Ctrl+Shift+O.  Enter : and the symbols will be grouped by category.  Press Up or Down and navigate to the place you want.","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"(Image: )","category":"page"},{"location":"userguide/codenavigation/#Open-Symbol-by-Name-1","page":"Code Navigation","title":"Open Symbol by Name","text":"","category":"section"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"You can open a particular symbol by its name with Ctrl+T, regardless of which file contains it. Type the name of a symbol you want to navigate to, and press Enter","category":"page"},{"location":"userguide/codenavigation/#","page":"Code Navigation","title":"Code Navigation","text":"(Image: Open Symbol)","category":"page"},{"location":"userguide/runningcode/#Running-Code-1","page":"Running Code","title":"Running Code","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The Julia extension provides a number of different ways to run your Julia code. This section describes all these options, except how to run code in the debugger, which is covered in a separate part of the documentation.","category":"page"},{"location":"userguide/runningcode/#Running-a-Julia-file-1","page":"Running Code","title":"Running a Julia file","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The VS Code command Run: Start Without Debugging (Ctrl+F5) by default starts a new Julia instance and runs the currently active Julia file. The command automatically creates a new VS Code terminal for this Julia process.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"Note that the Julia instance that is started by this command is entirely independent from the Julia REPL that the extension also supports.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"You can easily customize the behavior of Run: Start Without Debugging by creating a launch configuration. In many situations it is beneficial to not run the currently active file, but instead configure one file in your workspace as the main entry point for your project that is run when you press Ctrl+F5. ","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"Other customization options include custom working directories, command line arguments or a specific Julia environment (that is distinct from the active Julia environment in the VS Code window). Launch configurations also allow you to configure more complex execution scenarios where multiple Julia and non-Julia scripts are started simultaneously via compound launch configurations.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The Julia extension itself supports the following launch configuration attributes:","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"program: a path to a .jl file. This is the Julia file that will be run when this launch configuration is used. If this attribute is not specified, it defaults to the currently active Julia file in the editor.\ncwd: a path to a folder. The Julia process that is started by the launch configuration will use this path as the initial working directory. If this attribute is not specified, it defaults to the root working folder open in VS Code.\njuliaEnv: a path to a Julia project. The Julia process will be started with this Julia project as the active project. If this attribute is not specified, it defaults to the currently active Julia environment in the VS Code window.\nargs: an array of command line arguments. The values specified in this list will be passed as command line arguments to the Julia process that is started and are available via the Base.ARGS variable in the Julia script. If this attribute is not specified, no command line arguments are passed to the Julia instance.","category":"page"},{"location":"userguide/runningcode/#The-Julia-REPL-1","page":"Running Code","title":"The Julia REPL","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The Julia extension provides a Julia REPL inside VS Code. You can start this REPL with the Julia: Start REPL command.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The Julia REPL in the extension is identical to the default Julia REPL, but adds a number of additional integrations (plot pane, grid viewer, debugger etc.) that are not part of the standard REPL. Note that only the REPL that you start with the Julia: Start REPL command has these integrations. If you start Julia from a system shell inside VS Code, it won't provide these integration points.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The REPL that is started with the Julia: Start REPL command will have the root folder of the currently active workspace as its working directory, and will be started with the Julia project that is currently active in the VS Code window.","category":"page"},{"location":"userguide/runningcode/#Running-code-in-the-Julia-REPL-1","page":"Running Code","title":"Running code in the Julia REPL","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"There are four commands that you can use to run code from your editor in the Julia REPL: ","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"Julia: Execute Code (Ctrl+Enter)\nJulia: Execute Code Block (Alt+Enter)\nJulia: Execute Code Cell (Shift+Enter) \nJulia: Execute File","category":"page"},{"location":"userguide/runningcode/#Julia:-Execute-Code-(CtrlEnter)-1","page":"Running Code","title":"Julia: Execute Code (Ctrl+Enter)","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"This command will either send the text that is currently selected in the active editor to the Julia REPL, or it will send the entire line where the cursor is currently positioned when no text is selected. In the latter case it will also advance the cursor to the next line of code.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"This command works a little bit like copy-paste: it will literally just copy some code from the editor into the REPL as if that code was typed in the REPL. This design has some consequences that you should keep in mind:","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"When you send something, like a function definition to the REPL, no line or file information will be associated with that function. This can be annoying later on, when exceptions that are thrown in this function will not show any location information.\ninclude statements will always try to load relative paths relative to the current working directory, not relative to the file from which they are executed.\nMacros like @__DIR__ and @__FILE__ do not work properly.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"Due to these limitations, most users should use the Julia: Execute Code Block command in most cases.","category":"page"},{"location":"userguide/runningcode/#Julia:-Execute-Code-Block-(AltEnter)-1","page":"Running Code","title":"Julia: Execute Code Block (Alt+Enter)","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"Whenever, there is some Julia code selected in the currently active editor, this command will execute the selected code. If no text is selected, the command will identify the extent of the top-level language construct that the cursor is located in (except modules) and execute that code block.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"This command uses a different execution model than Julia: Execute Code that provides a more robust experience. In particular, it will associate location information with code that is executed, include will work correctly with relative paths and macros like @__DIR__ and @__FILE__ work as expected.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"For most users, this should be their default command to run Julia code in the REPL.","category":"page"},{"location":"userguide/runningcode/#Julia:-Execute-Code-Cell-(ShiftEnter)-1","page":"Running Code","title":"Julia: Execute Code Cell (Shift+Enter)","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"The extension provides support for demarking code cells in standard Julia files with a specially formatted comment: ##. This command will identify in which code cell the cursor in the active editor currently is and then execute the code in that cell. If there are no code cells used in the current file, it will execute the entire file.","category":"page"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"This command uses the same code execution techniques as the Julia: Execute Code Block command. Include statements, location information etc. all work as expected, that is run with this command.","category":"page"},{"location":"userguide/runningcode/#Julia:-Execute-File-1","page":"Running Code","title":"Julia: Execute File","text":"","category":"section"},{"location":"userguide/runningcode/#","page":"Running Code","title":"Running Code","text":"This command runs the entire content of the currently active file in the Julia REPL. It uses the same code execution techniques as the Julia: Execute Code Block command. Include statements, location information etc. all work as expected, that is run with this command.","category":"page"},{"location":"userguide/weave/#Julia-Markdown-Documents-1","page":"Julia Markdown Documents","title":"Julia Markdown Documents","text":"","category":"section"},{"location":"userguide/privacy/#Privacy-1","page":"Privacy","title":"Privacy","text":"","category":"section"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"You can help improve the Julia VS Code extension by sending usage statistics and exceptions to the development team. By default, telemetry and crash report data are not collected, but rather the user has to opt-in to have their data sent. ","category":"page"},{"location":"userguide/privacy/#Opt-In-Policy-1","page":"Privacy","title":"Opt-In Policy","text":"","category":"section"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"By default both juliaenableTelemetry and juliaenableCrashReporter are set to null.  With the null setting, no data is sent to the development team. The UI does send a prompt asking the user to agree to enabling the settings for telemetry and crash report. Without opting in, your data is not sent to the development team. ","category":"page"},{"location":"userguide/privacy/#Collecting-Data-1","page":"Privacy","title":"Collecting Data","text":"","category":"section"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"If the juliaenableTelemetry setting is configured to be true, anonymous, non-identifying usage and error data is sent to the development team.","category":"page"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"When the juliaenableCrashReporter setting is configured to be true, stack traces from errors in the extension are sent to the development team. Those stack traces can contain identifying information, for example filenames.","category":"page"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"This information is collected and sent via Azure Application Insights.","category":"page"},{"location":"userguide/privacy/#Disabling-Telemetry-1","page":"Privacy","title":"Disabling Telemetry","text":"","category":"section"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"To disable telemetry and not report any usage data or crash reports, set the juliaenableTelemetry and juliaenableCrashReporter setting to false.","category":"page"},{"location":"userguide/privacy/#Using-Collected-Data-1","page":"Privacy","title":"Using Collected Data","text":"","category":"section"},{"location":"userguide/privacy/#","page":"Privacy","title":"Privacy","text":"The collected data is used to improve the julia VS Code extension. We don't sell the information. We might sometimes publish anonymous statistics (for example number of users etc.)","category":"page"},{"location":"#Julia-VSCode-Documentation-1","page":"Home","title":"Julia VSCode Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"NOTE: This documentation is currently being updated and revamped.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia for VSCode is a powerful, free IDE for the Julia language. Visual Studio Code is a powerful and customizable editor. With a completely live environment, Julia for VSCode aims to take the frustration and guesswork out of programming and put the fun back in.  We build on Julia’s unique combination of ease-of-use and performance. Beginners and experts can build better software more quickly, and get to a result faster.","category":"page"},{"location":"#Installation/Updates-1","page":"Home","title":"Installation/Updates","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To install and download Julia, VS Code, and the Julia extension, see Installation and Configuration instructions. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia VSCode extension release features can be found on our Updates page. ","category":"page"},{"location":"#Reporting-Issues/Bugs/Discussions-1","page":"Home","title":"Reporting Issues/Bugs/Discussions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have any issues with this setup, look up for a FAQ section first. If it doesn't help, please do report them on vscode.jl GitHub repository or at Julia Discourse under the Tooling ▶ VSCode category. We'll do our best to help you get going.","category":"page"},{"location":"#User-Manual-1","page":"Home","title":"User Manual","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The following pages are the user manual. These describe how to install and use the Julia extension on VSCode, along with answer questions most new users encounter.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Running Code\nJulia Environments\nCode Navigation\nEditing Code\nFormatting Code\nPlot Gallery\nData Grid\nUnderstanding Code\nLinter\nTasks\nDebugging\nCompiling Sysimages\nJulia Markdown Documents\nRemote Development\nSettings","category":"page"},{"location":"userguide/settings/#Settings-1","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"userguide/env/#Julia-Environments-1","page":"Julia Environments","title":"Julia Environments","text":"","category":"section"}]
}
